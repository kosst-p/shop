class ProductTypes {
    constructor(props) {
        this.parentDOM = props.parentDOM;
        this.productsArray = props.productsArray;
        this.ulClassName = props.ulClassName;
    }

    // создание ul
    createList() {
        const ul = document.createElement("ul");
        ul.classList.add(this.ulClassName);
        this.parentDOM.appendChild(ul); // добавил в DOM
    }

    // создание li и добавление в ul
    createListItems() {
        const parent = document.querySelector("." + this.ulClassName);
        this.productsArray.map(item => {
            const { id, type, name } = item;
            let li = document.createElement("li");
            li.setAttribute("data-id", id);
            parent.appendChild(li); // добавил в ul
            li.textContent = name;
            li.addEventListener("click", e => {
                this.changeProductTypeByClick(e);
            });
        });
    }

    // // событие клика на li с сменой
    changeProductTypeByClick(event) {
        let parent = document.querySelector("." + this.ulClassName);
        this.switchActiveClass(event.target, "active-product", parent);
        // пользовательское событие
        let typeChanged = new CustomEvent("typeChanged", {
            bubbles: true,
            detail: { id: event.target.getAttribute("data-id") }
        });
        // запускаем созданное событие на элементе
        app.onTypeChanged(); // ? вызов из App
        event.target.dispatchEvent(typeChanged);
    }

    // смена активного класса
    switchActiveClass(element, className, parent) {
        parent.childNodes.forEach(el => {
            el.classList.remove(className);
            el.removeAttribute("class");
            if (el.getAttribute("data-default")) {
                el.removeAttribute("data-default");
            }
        });
        element.classList.add(className);
    }

    render() {
        this.addEventListeners("test1", "test1");
        this.addEventListeners("test2", "test2");
        this.addEventListeners("test3", "test3");
        this.addEventListeners("test4", "test4");
        this.addEventListeners("test4", "test6");
        this.addEventListeners("test4", "test5");
        this.fireEvent("test12");
        // console.log(this.listeners);
        this.createList();
        this.createListItems();
    }
}

const productTypesList = new ProductTypes({
    parentDOM: ROOT_PRODUCT_TYPES,
    productsArray: productsType,
    ulClassName: "menu-list"
});

productTypesList.render();
